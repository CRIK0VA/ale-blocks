{"version":3,"file":"block-meta/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAqC;AACQ;AACc;AACiD;AACjC;AAChC;AACO;AAElD,MAAMY,OAAO,GAAGA,CAAE;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAc,CAAC,KAAM;EAC9D,IAAKF,QAAQ,KAAK,MAAM,EAAG,OAAO,IAAI;EAEtC,OACGG,oDAAA,CAAAC,2CAAA,QACED,oDAAA,CAACV,2EAAyB;IACxBY,MAAM,EAAC;EAAoB,GAEzBlB,mDAAE,CAAE,iBAAkB,CACC,CAAC,EAC5BgB,oDAAA,CAACX,+DAAa;IACZc,IAAI,EAAC,oBAAoB;IACzBC,KAAK,EAAGpB,mDAAE,CAAE,iBAAkB;EAAG,GAEjCgB,oDAAA,CAACL,4DAAS,QACRK,oDAAA,CAACT,2DAAQ,QACPS,oDAAA,CAACR,8DAAW;IACVa,KAAK,EAAGrB,mDAAE,CAAE,WAAY,CAAG;IAC3BsB,KAAK,EAAGR,UAAU,CAACS,qBAAuB;IAC1CC,QAAQ,EAAKC,GAAG,IACdV,aAAa,CAAE;MAAEQ,qBAAqB,EAAEE;IAAI,CAAE;EAC/C,CACW,CACN,CAAC,EACXT,oDAAA,CAACT,2DAAQ,QACPS,oDAAA,CAACP,8DAAW;IACViB,KAAK,EAAGZ,UAAU,CAACa,iBAAmB;IACtCH,QAAQ,EAAKC,GAAG,IACdV,aAAa,CAAE;MAAEY,iBAAiB,EAAEF;IAAI,CAAE;EAC3C,CACW,CACN,CACD,CACE,CAEf,CAAC;AAEP,CAAC;AAED,MAAMG,eAAe,GAAG1B,2DAAU,CAAI2B,MAAM,IAAM;EACjD,OAAO;IACNf,UAAU,EAAEe,MAAM,CAAE,aAAc,CAAC,CAACC,sBAAsB,CAAE,MAAO,CAAC;IACpEjB,QAAQ,EAAEgB,MAAM,CAAE,aAAc,CAAC,CAACE,kBAAkB,CAAC;EACtD,CAAC;AACF,CAAE,CAAC;AAEH,MAAMC,iBAAiB,GAAG7B,6DAAY,CAAIO,QAAQ,IAAM;EACvD,OAAO;IACNK,aAAaA,CAAEU,GAAG,EAAG;MACpBf,QAAQ,CAAE,aAAc,CAAC,CAACuB,QAAQ,CAAE;QAAEC,IAAI,EAAET;MAAI,CAAE,CAAC;IACpD;EACD,CAAC;AACF,CAAE,CAAC;AAEH,iEAAexB,2DAAO,CAAE,CAAE2B,eAAe,EAAEI,iBAAiB,CAAG,CAAC,CAAEpB,OAAQ,CAAC;;;;;;;;;;AC9D3E;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNoD;AACT;AAE3CuB,kEAAc,CAAE,iBAAiB,EAAE;EAClCC,MAAM,EAAExB,2DAAOA;AAChB,CAAE,CAAC,C","sources":["webpack://ale-blocks/./src/block-meta/components/MetaBox.js","webpack://ale-blocks/external window \"React\"","webpack://ale-blocks/external window [\"wp\",\"components\"]","webpack://ale-blocks/external window [\"wp\",\"compose\"]","webpack://ale-blocks/external window [\"wp\",\"data\"]","webpack://ale-blocks/external window [\"wp\",\"editPost\"]","webpack://ale-blocks/external window [\"wp\",\"i18n\"]","webpack://ale-blocks/external window [\"wp\",\"plugins\"]","webpack://ale-blocks/webpack/bootstrap","webpack://ale-blocks/webpack/runtime/compat get default export","webpack://ale-blocks/webpack/runtime/define property getters","webpack://ale-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://ale-blocks/webpack/runtime/make namespace object","webpack://ale-blocks/./src/block-meta/index.js"],"sourcesContent":["import { __ } from '@wordpress/i18n';\nimport { compose } from '@wordpress/compose';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { PluginDocumentSettingPanel, PluginSidebar, PluginSidebarMoreMenuItem } from '@wordpress/edit-post';\nimport { PanelRow, TextControl, ColorPicker } from '@wordpress/components';\nimport { dispatch } from '@wordpress/data';\nimport { PanelBody } from '@wordpress/components';\n\nconst MetaBox = ( { postType, metaFields, setMetaFields } ) => {\n\tif ( postType !== 'post' ) return null;\n\n\treturn (\n    <>\n      <PluginSidebarMoreMenuItem\n        target=\"metafields-sidebar\"\n      >\n        { __( 'Custom Metadata' ) }\n      </PluginSidebarMoreMenuItem>\n      <PluginSidebar\n        name=\"metafields-sidebar\"\n        title={ __( 'Custom Metadata' ) }\n      >\n        <PanelBody>\n          <PanelRow>\n            <TextControl\n              label={ __( 'Title Two' ) }\n              value={ metaFields._meta_field_title_two }\n              onChange={ ( val ) =>\n                setMetaFields( { _meta_field_title_two: val } )\n              }\n            ></TextControl>\n          </PanelRow>\n          <PanelRow>\n            <ColorPicker\n              color={ metaFields._meta_field_color }\n              onChange={ ( val ) =>\n                setMetaFields( { _meta_field_color: val } )\n              }\n            ></ColorPicker>\n          </PanelRow>\n        </PanelBody>\n      </PluginSidebar>\n\t\t\t\n    </>\n\t);\n};\n\nconst applyWithSelect = withSelect( ( select ) => {\n\treturn {\n\t\tmetaFields: select( 'core/editor' ).getEditedPostAttribute( 'meta' ),\n\t\tpostType: select( 'core/editor' ).getCurrentPostType(),\n\t};\n} );\n\nconst applyWithDispatch = withDispatch( ( dispatch ) => {\n\treturn {\n\t\tsetMetaFields( val ) {\n\t\t\tdispatch( 'core/editor' ).editPost( { meta: val } );\n\t\t},\n\t};\n} );\n\nexport default compose( [ applyWithSelect, applyWithDispatch ] )( MetaBox );\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"compose\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"editPost\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"plugins\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerPlugin } from '@wordpress/plugins';\nimport MetaBox from './components/MetaBox';\n\nregisterPlugin( 'metadata-plugin', {\n\trender: MetaBox,\n} );\n"],"names":["__","compose","withSelect","withDispatch","PluginDocumentSettingPanel","PluginSidebar","PluginSidebarMoreMenuItem","PanelRow","TextControl","ColorPicker","dispatch","PanelBody","MetaBox","postType","metaFields","setMetaFields","createElement","Fragment","target","name","title","label","value","_meta_field_title_two","onChange","val","color","_meta_field_color","applyWithSelect","select","getEditedPostAttribute","getCurrentPostType","applyWithDispatch","editPost","meta","registerPlugin","render"],"sourceRoot":""}